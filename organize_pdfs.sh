#!/bin/bash

REPORT=0
ROOT_FOLDER=""

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --root)
            if [[ -z "$2" ]]; then
                echo "Usage: $0 --root <folder>"
                exit 1
            fi

            if [[ ! -d "$2" ]]; then
                ROOT_FOLDER="$2"
                shift 2
            else
                echo "Error: Folder $2 already exists"
                exit 1
            fi
            ;;
        --report)
            REPORT=1
            shift
            ;;
        *)
            echo "Unknown argument: $1"
            exit 1
            ;;
    esac
done

# Generate the config.sh file if it doesn't exist
if [[ ! -f "config.sh" ]]; then
    echo "Generating config.sh file..."
    echo "# This file is automatically generated by organize_pdfs.sh" > "config.sh"
    echo "# the format is [category]=\"subcategory1 subcategory2 ...\"" >> "config.sh"
    echo "declare -A categories=(
    [Programming]=\"Python Java C\"
    [AI]=\"Machine_Learning Neural_Networks\"
    [Math]=\"Linear_Algebra Calculus\"
    [Database]=\"SQL NoSQL\"
    [Security]=\"Cryptography Networks_Security\"
    )" >> "config.sh"
    chmod +x "config.sh"
fi
wait
source "config.sh"

# Create the ROOT_FOLDER and the categories
mkdir -p "$ROOT_FOLDER"
cd "$ROOT_FOLDER"
for category in "${!categories[@]}"; do
    mkdir -p "$category"
    for subcategory in ${categories[$category]}; do
        mkdir "$category/$subcategory"
    done
done

# Given a pdf file, categorize it and move it to the corresponding folder
categorize() {
    # Source the config file
    source ../config.sh
    file="$1"
    for category in "${!categories[@]}"; do
        for subcategory in ${categories[$category]}; do
            # Get the first page of the pdf
            pdf_text=$(pdftotext -l 1 "$file" -)
            if [[ ${#pdf_text} -lt 2 ]]; then
                # if empty, get the second page
                pdf_text=$(pdftotext -l 2 "$file" -)
            fi
            # Check for the subcategory and move the file to the corresponding folder
            is_subcategory=$(echo "$pdf_text" | grep -i "\\b$(echo "$subcategory" | cut -d'_' -f1)\\b")
            if [[ $is_subcategory ]]; then
                mv "$file" "$category/$subcategory/" 
                return
            fi
        done
    done
    # If the file is not in any of the categories, move it to the "Others" folder
    mkdir -p "Others"
    mv "$file" "Others/"
}

calculate_accuracy() {
    source ../config.sh


    total_files=$(find . -type f | wc -l)
    correct_overall=()
    report=()
    for cat in "${!categories[@]}"; do
        correct_cat=0
        cat_files=$(find ./${cat}/ -type f | wc -l)
        for subcat in ${categories[$cat]}; do
            for pdf in $(find ./${cat}/${subcat}/ -type f); do
                read -p "Is ${pdf} in the correct category? (y/n) " answer
                case $answer in
                    n|N ) continue;;
                    * ) correct_cat=$((correct_cat+1));;
                esac
            done
        done
        correct_overall=$((correct_overall+correct_cat))
        cat_accuracy=$(($correct_cat*100/$cat_files))
        report+=("$cat: $cat_accuracy%\n")
    done

    # Calculate the accuracy
    accuracy=$((correct_overall*100/$total_files))

    echo ""
    echo "Analysis Report:"
    echo "----------------"
    echo -e "${report[@]}"
    echo "Correctness Score: ${accuracy}%"
}
export -f categorize

# Get all pdf files in the current directory
files=(../*.pdf)
if [ ${#files[@]} -eq 0 ]; then
    echo "No PDFs in the current directory"
    exit 1
fi

# Multi-threaded parallelization
parallel -j "${#files[@]}" categorize ::: "${files[@]}" 

# Tree view of the files
tree -C --filesfirst

# Calculate the accuracy
if [ $REPORT -eq 1 ]; then
    calculate_accuracy
fi

# Return files to their original location if the user wants to
read -p "Are you sure you want to move the files to the corresponding folders? (y/n) " answer
case $answer in
    # Find all files in the current directory and move them to their original location
    # Then delete the ROOT_FOLDER
    n|N ) find . -type f -exec mv {} .. \; && cd .. && rm -rf "$ROOT_FOLDER" && exit 1;;
    * ) exit 0;;
esac
